# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-docker-image:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      DB_URL: ${{ secrets.DB_URL }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      KAKAO_CLIENT_ID: ${{ secrets.KAKAO_CLIENT_ID }}
      KAKAO_REDIRECT_URL: ${{ secrets.KAKAO_REDIRECT_URL }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Set executable permission for Gradlew
        run: chmod +x ./gradlew

      # Spring Boot 애플리케이션 Build
      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      # Docker 이미지 Build
      - name: docker image build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test .

      # DockerHub Login
      - name: docker login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # DockerHub push
      - name: DockerHub push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test

  run-docker-image-on-ec2:
    needs: build-docker-image
    runs-on: self-hosted

    steps:
      # 1. 최신 이미지 pull
      - name: docker pull
        run: sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test

      # 2. 기존 container 중지
      - name: docker stop container
        run: sudo docker stop $(sudo docker ps -q) 2>/dev/null || true

      # 환경변수 디버깅
      - name: debug secrets
        run: |
          echo "DB_URL=${{ secrets.DB_URL }}"
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}"
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}"
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}"
          echo "KAKAO_REDIRECT_URL=${{ secrets.KAKAO_REDIRECT_URL }}"
          echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}"


      # 3. 최신 이미지를 컨테이너화하여 실행시킴
      - name: docker run new container
        run: sudo docker run --name spring-cicd-test --rm -d -p 8080:8080 -e "DB_URL=${{ secrets.DB_URL }}" -e "DB_USERNAME=${{ secrets.DB_USERNAME }}" -e "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" -e "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" -e "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" -e "KAKAO_REDIRECT_URL=${{ secrets.KAKAO_REDIRECT_URL }}" ${{ secrets.DOCKERHUB_USERNAME }}/spring-cicd-test

      


      # 4. 미사용 이미지 정리
      - name: delete old docker image
        run: sudo docker system prune -f